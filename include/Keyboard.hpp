#ifndef KEYBOARD_HPP
#define KEYBOARD_HPP

#include <GLFW/glfw3.h>

class Keyboard {
   public:
    enum Key {
        UNKNOWN = GLFW_KEY_UNKNOWN,
        A = GLFW_KEY_A,
        B = GLFW_KEY_B,
        C = GLFW_KEY_C,
        D = GLFW_KEY_D,
        E = GLFW_KEY_E,
        F = GLFW_KEY_F,
        G = GLFW_KEY_G,
        H = GLFW_KEY_H,
        I = GLFW_KEY_I,
        J = GLFW_KEY_J,
        K = GLFW_KEY_K,
        L = GLFW_KEY_L,
        M = GLFW_KEY_M,
        N = GLFW_KEY_N,
        O = GLFW_KEY_O,
        P = GLFW_KEY_P,
        Q = GLFW_KEY_Q,
        R = GLFW_KEY_R,
        S = GLFW_KEY_S,
        T = GLFW_KEY_T,
        U = GLFW_KEY_U,
        V = GLFW_KEY_V,
        W = GLFW_KEY_W,
        X = GLFW_KEY_X,
        Y = GLFW_KEY_Y,
        Z = GLFW_KEY_Z,
        NUM0 = GLFW_KEY_0,
        NUM1 = GLFW_KEY_1,
        NUM2 = GLFW_KEY_2,
        NUM3 = GLFW_KEY_3,
        NUM4 = GLFW_KEY_4,
        NUM5 = GLFW_KEY_5,
        NUM6 = GLFW_KEY_6,
        NUM7 = GLFW_KEY_7,
        NUM8 = GLFW_KEY_8,
        NUM9 = GLFW_KEY_9,
        ESCAPE = GLFW_KEY_ESCAPE,
        LCONTROL = GLFW_KEY_LEFT_CONTROL,
        LSHIFT = GLFW_KEY_LEFT_SHIFT,
        LALT = GLFW_KEY_LEFT_ALT,
        LSYSTEM = GLFW_KEY_LEFT_SUPER,
        RCONTROL = GLFW_KEY_RIGHT_CONTROL,
        RSHIFT = GLFW_KEY_RIGHT_SHIFT,
        RALT = GLFW_KEY_RIGHT_ALT,
        RSYSTEM = GLFW_KEY_RIGHT_SUPER,
        MENU = GLFW_KEY_MENU,
        LBRACKET = GLFW_KEY_LEFT_BRACKET,
        RBRACKET = GLFW_KEY_RIGHT_BRACKET,
        SEMICOLON = GLFW_KEY_SEMICOLON,
        COMMA = GLFW_KEY_COMMA,
        PERIOD = GLFW_KEY_PERIOD,
        QUOTE = GLFW_KEY_APOSTROPHE,
        SLASH = GLFW_KEY_SLASH,
        BACKSLASH = GLFW_KEY_BACKSLASH,
        TILDE = GLFW_KEY_APOSTROPHE,
        EQUAL = GLFW_KEY_EQUAL,
        HYPHEN = GLFW_KEY_MINUS,
        SPACE = GLFW_KEY_SPACE,
        ENTER = GLFW_KEY_ENTER,
        BACKSPACE = GLFW_KEY_BACKSPACE,
        TAB = GLFW_KEY_TAB,
        PAGEUP = GLFW_KEY_PAGE_UP,
        PAGEDOWN = GLFW_KEY_PAGE_DOWN,
        END = GLFW_KEY_END,
        HOME = GLFW_KEY_HOME,
        INSERT = GLFW_KEY_INSERT,
        DELETE = GLFW_KEY_DELETE,
        ADD = GLFW_KEY_KP_ADD,
        SUBTRACT = GLFW_KEY_KP_SUBTRACT,
        MULTIPLY = GLFW_KEY_KP_MULTIPLY,
        DIVIDE = GLFW_KEY_KP_DIVIDE,
        LEFT = GLFW_KEY_LEFT,
        RIGHT = GLFW_KEY_RIGHT,
        UP = GLFW_KEY_UP,
        DOWN = GLFW_KEY_DOWN,
        NUMPAD0 = GLFW_KEY_KP_0,
        NUMPAD1 = GLFW_KEY_KP_1,
        NUMPAD2 = GLFW_KEY_KP_2,
        NUMPAD3 = GLFW_KEY_KP_3,
        NUMPAD4 = GLFW_KEY_KP_4,
        NUMPAD5 = GLFW_KEY_KP_5,
        NUMPAD6 = GLFW_KEY_KP_6,
        NUMPAD7 = GLFW_KEY_KP_7,
        NUMPAD8 = GLFW_KEY_KP_8,
        NUMPAD9 = GLFW_KEY_KP_9,
        F1 = GLFW_KEY_F1,
        F2 = GLFW_KEY_F2,
        F3 = GLFW_KEY_F3,
        F4 = GLFW_KEY_F4,
        F5 = GLFW_KEY_F5,
        F6 = GLFW_KEY_F6,
        F7 = GLFW_KEY_F7,
        F8 = GLFW_KEY_F8,
        F9 = GLFW_KEY_F9,
        F10 = GLFW_KEY_F10,
        F11 = GLFW_KEY_F11,
        F12 = GLFW_KEY_F12,
        F13 = GLFW_KEY_F13,
        F14 = GLFW_KEY_F14,
        F15 = GLFW_KEY_F15,
        PAUSE = GLFW_KEY_PAUSE,
        KEY_COUNT
    };

    static bool isKeyPressed(Key key);
};

#endif
